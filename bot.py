#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
bot.py

Created on Sat May 30 11:23:35 2020

@author: The Mender of Arse Juice
"""
import os
import random
import discord
import asyncio
import youtube_dl
from dotenv import load_dotenv
from discord.ext import commands
from gtts import gTTS, lang
from constants import *

load_dotenv(verbose=True)
TOKEN = os.getenv('DISCORD_TOKEN')
GUILD = os.getenv('DISCORD_GUILD')
PARENT_DIRECTORY = os.path.dirname(os.path.abspath(__file__))
HOLY_SCRIPTURE_TXT = PARENT_DIRECTORY + '/' + "HolyScripture.txt"
USER_LEGEND_TXT = PARENT_DIRECTORY + '/' + "UserLegend.txt"

class YeeCommands(commands.Cog):
    def __init__(self, bot):
        print("Initializing YeeCommands class")
        self.bot = bot
        
    async def on_ready(self, ctx):
        print(f'{bot.user.name} has connected to Discord!')

    @commands.Cog.listener()
    async def on_member_join(self, member):
        await member.create_dm()
        await member.dm_channel.send(
            f'Hi {member.name}, welcome to my Discord server!'
        )
        
    @commands.Cog.listener()
    async def on_message(self, message):
        print('Message received via ' + repr(message.channel) + ' of type ' + repr(message.channel.type))
        print(message.content)
        if message.author == bot.user:
            return
        
        if repr(message.channel.type).find('private') != -1:
            print('Private message received.')
            if message.content == 'logout':
                print('Logging out.')
                await bot.close()
        
    @commands.command()
    async def YEE(self, ctx):
        text = getYee()            
        await ctx.channel.send(text)
        return text
        
    @commands.command()
    async def legend(self, ctx):        # Read in the user legend and print it. Maybe make this fancier later.
        userLegendFile = open(USER_LEGEND_TXT, "r", encoding="utf8")
        userLegendLines = userLegendFile.readlines()
        userLegendFile.close()
        
        await ctx.channel.send(''.join(userLegendLines))
    
    @commands.command()
    async def roles(self, ctx):
        
        # Read in the Holy Scripture pertaining to our roles
        holyScriptureFile = open(HOLY_SCRIPTURE_TXT, "r", encoding="utf8")
        holyScriptureReading = ''.join(holyScriptureFile.readlines()[ENOS_START_LINE_NUMBER:(ENOS_START_LINE_NUMBER + ENOS_NUMBER_OF_LINES)])
        holyScriptureFile.close()
        
        await ctx.channel.send(holyScriptureReading + '\n' + 'These are our sacred roles & duties, as given by our Lord.')
        
    @commands.command()
    async def YEEE(self, ctx):
        text = getYeee()
        await ctx.channel.send(text)
        
    @commands.command()
    async def helpplz(self, ctx):
        listOfCommands = LIST_OF_COMMANDS
        
        await ctx.channel.send(''.join(listOfCommands))
        
    @commands.command()
    async def wut(self, ctx):
        # Explain what this bot is about
        explanation = "I am an evangelist for YEEEEEEEEEEEEEEEEEE, the holy word we are commanded to proclaim by our Lord, Noah. This command can be found in Chapter 2 of our holy document, generated by a machine learning algorithm based on GPT-2, trained on a bdsm dataset scraped from Literotica, and fed sliding window prompts extracted from the King James Bible. For more information, see this link: https://www.reddit.com/r/MachineLearning/comments/fvwwzj/project_if_gpt2_read_erotica_what_would_be_its/"
        await ctx.channel.send(explanation)

    @commands.command()
    async def SHEM(self, ctx):
        text = getShem()
        await ctx.channel.send(text)
        
    @commands.command()
    async def SHEMM(self, ctx):
        text = getShemm()
        await ctx.channel.send(text)
        

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        print("Initializing YTDLSource class")
        super().__init__(source, volume)

        self.data = data

        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))

        if 'entries' in data:
            # take first item from a playlist
            data = data['entries'][0]

        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)


class Music(commands.Cog):
    def __init__(self, bot):
        print("Initializing Music class")
        self.bot = bot

    @commands.command()
    async def fancy(self, ctx):
        """You know ;)"""
        await self.yt(ctx, url=FANCY_YT_LINK)

    @commands.command()
    async def join(self, ctx, *, channel: discord.VoiceChannel):
        """Joins a voice channel"""

        if ctx.voice_client is not None:
            return await ctx.voice_client.move_to(channel)

        await channel.connect()

    @commands.command()
    async def play(self, ctx, *, query):
        """Plays a file from the local filesystem"""

        source = discord.PCMVolumeTransformer(discord.FFmpegPCMAudio(query))
        ctx.voice_client.play(source, after=lambda e: print('Player error: %s' % e) if e else None)

        await ctx.send('Now playing: {}'.format(query))

    @commands.command()
    async def yt(self, ctx, *, url):
        """Plays from a url (almost anything youtube_dl supports)"""

        async with ctx.typing():
            player = await YTDLSource.from_url(url, loop=self.bot.loop)
            ctx.voice_client.play(player, after=lambda e: print('Player error: %s' % e) if e else None)

        await ctx.send('Now playing: {}'.format(player.title))

    @commands.command()
    async def stream(self, ctx, *, url):
        """Streams from a url (same as yt, but doesn't predownload)"""

        async with ctx.typing():
            player = await YTDLSource.from_url(url, loop=self.bot.loop, stream=True)
            ctx.voice_client.play(player, after=lambda e: print('Player error: %s' % e) if e else None)

        await ctx.send('Now playing: {}'.format(player.title))

    @commands.command()
    async def volume(self, ctx, volume: int):
        """Changes the player's volume"""

        if ctx.voice_client is None:
            return await ctx.send("Not connected to a voice channel.")

        ctx.voice_client.source.volume = volume / 100
        await ctx.send("Changed volume to {}%".format(volume))

    @commands.command()
    async def stop(self, ctx):
        """Stops and disconnects the bot from voice"""

        await ctx.voice_client.disconnect()

    @fancy.before_invoke
    @play.before_invoke
    @yt.before_invoke
    @stream.before_invoke
    async def ensure_voice(self, ctx):
        if ctx.voice_client is None:
            if ctx.author.voice:
                await ctx.author.voice.channel.connect()
            else:
                await ctx.send("You are not connected to a voice channel.")
                raise commands.CommandError("Author not connected to a voice channel.")
        elif ctx.voice_client.is_playing():
            ctx.voice_client.stop()
            
class YeeSpeech(commands.Cog):
    def __init__(self, bot):
        print("Initializing YeeSpeech class")
        self.bot = bot

    @commands.command()
    async def YEEjoin(self, ctx, *, channel: discord.VoiceChannel):
        """Joins a voice channel"""

        if ctx.voice_client is not None:
            return await ctx.voice_client.move_to(channel)

        await channel.connect()
        
    @commands.command()
    async def SHEMe(self, ctx):
        """Plays a file from the local filesystem"""
        text = getShem()
        self.speak_praise(ctx, text)
        await ctx.send(text)
        
    @commands.command()
    async def SHEMMe(self, ctx):
        """Plays a file from the local filesystem"""
        text = getShemm()
        self.speak_praise(ctx, text)
        await ctx.send(text)

    @commands.command()
    async def YEEe(self, ctx):
        """Plays a file from the local filesystem"""
        text = getYee()
        self.speak_praise(ctx, text)
        await ctx.send(text)

    @commands.command()
    async def YEEEe(self, ctx):
        """Plays a file from the local filesystem"""
        text = getYeee()
        self.speak_praise(ctx, text)
        await ctx.send(text)
        
    def speak_praise(self, ctx, text):
        """Plays a file from the local filesystem"""
        languages = lang.tts_langs()
        language = random.choice(list(languages.keys()))
        print('Using language {}'.format(languages[language]))
        localization = random.choice(LOCALIZATIONS.split())
        print('Using localization {}'.format(localization))
        tts = gTTS(text, lang='en', tld='co.uk')
        file = './tmp.mp3'
        tts.save(file)
        source = discord.PCMVolumeTransformer(discord.FFmpegPCMAudio(file))
        ctx.voice_client.play(source, after=lambda e: print('Player error: %s' % e) if e else None)

    @commands.command()
    async def YEEvolume(self, ctx, volume: int):
        """Changes the player's volume"""

        if ctx.voice_client is None:
            return await ctx.send("Not connected to a voice channel.")

        ctx.voice_client.source.volume = volume / 100
        await ctx.send("Changed volume to {}%".format(volume))

    @commands.command()
    async def YEEstop(self, ctx):
        """Stops and disconnects the bot from voice"""

        await ctx.voice_client.disconnect()

    @SHEMMe.before_invoke
    @SHEMe.before_invoke
    @YEEe.before_invoke
    async def YEEensure_voice(self, ctx):
        if ctx.voice_client is None:
            if ctx.author.voice:
                await ctx.author.voice.channel.connect()
            else:
                await ctx.send("You are not connected to a voice channel.")
                raise commands.CommandError("Author not connected to a voice channel.")
        elif ctx.voice_client.is_playing():
            ctx.voice_client.stop()
    
def initYoutubeDL():
    print ("Initializing YoutubeDL")
    # Suppress noise about console usage from errors
    youtube_dl.utils.bug_reports_message = lambda: ''
    
    ytdl_format_options = {
        'format': 'bestaudio/best',
        'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
        'restrictfilenames': True,
        'noplaylist': True,
        'nocheckcertificate': True,
        'ignoreerrors': False,
        'logtostderr': False,
        'quiet': True,
        'no_warnings': True,
        'default_search': 'auto',
        'source_address': '0.0.0.0' # bind to ipv4 since ipv6 addresses cause issues sometimes
    }
    
    ffmpeg_options = {
        'options': '-vn'
    }
    
    ytdl = youtube_dl.YoutubeDL(ytdl_format_options)
    
    return ffmpeg_options, ytdl

def getShem():
    # Read in the Holy Scripture pertaining to SHEM
    holyScriptureFile = open(HOLY_SCRIPTURE_TXT, "r", encoding="utf8")
    holyScriptureReading = ''.join(holyScriptureFile.readlines()[SHEM_START_LINE_NUMBER:(SHEM_START_LINE_NUMBER + SHEM_NUMBER_OF_LINES)])
    holyScriptureFile.close()
    
    text = 'A reading from the Holy Text pertaining to Shem.' + '\n\n' + holyScriptureReading + '\n' + 'Lord have mercy on Shem.'
    
    return text
    
def getShemm():
    # Read in the Holy Scripture pertaining to SHEM (and more)
    holyScriptureFile = open(HOLY_SCRIPTURE_TXT, "r", encoding="utf8")
    holyScriptureReading = ''.join(holyScriptureFile.readlines()[SHEM_START_LINE_NUMBER:(SHEM_START_LINE_NUMBER + SHEM_PROBLEMATIC_NUMBER_OF_LINES)])
    holyScriptureFile.close()
    text = 'A reading from the Holy Text pertaining to Shem.' + '\n\n' + holyScriptureReading + '\n' + 'Lord have mercy on Shem.'
    
    return text

def getYee():
    
    # Read in the Holy Scripture and get the number of lines
    holyScriptureFile = open(HOLY_SCRIPTURE_TXT, "r", encoding="utf8")
    holyScriptureLines = holyScriptureFile.readlines()
    holyScriptureFile.close()
    holySize = len(holyScriptureLines)
    
    # Generate a random length of lines to read from the holy scripture
    holyReadingLength = random.randint(1,MAX_NUMBER_OF_HOLY_LINES)
    
    # Subtract holyLength from holySize to avoid overflow
    holyStart  = random.randint(0,holySize-holyReadingLength)
    holyStop   = holyStart + holyReadingLength

    # Join the list into a single string, inserting empty characters between each element
    # The newline characters will be interpreted appropriately by the send() below
    holyScriptureReading = ''.join(holyScriptureLines[holyStart:holyStop])
    
    return 'A reading from the Holy Text.' + '\n\n' + holyScriptureReading + '\n' + 'This is the word of our Lord.'  

def getYeee():
    # Read in the Holy Scripture pertaining to YEE
    holyScriptureFile = open(HOLY_SCRIPTURE_TXT, "r", encoding="utf8")
    holyScriptureReading = ''.join(holyScriptureFile.readlines()[YEE_START_LINE_NUMBER:(YEE_START_LINE_NUMBER + YEE_NUMBER_OF_LINES)])
    holyScriptureFile.close()

    return 'A reading of great glory from the Holy Text.' + '\n\n' + holyScriptureReading + '\n' + 'Amen.'  

if __name__ == '__main__':
    bot = commands.Bot(
        command_prefix = commands.when_mentioned_or("!"),
        description = 'Praise be to our holy smut bot.'
    )
    ffmpeg_options, ytdl = initYoutubeDL()
    bot.add_cog(YeeCommands(bot))
    bot.add_cog(Music(bot))
    bot.add_cog(YeeSpeech(bot))
    bot.run(TOKEN)
